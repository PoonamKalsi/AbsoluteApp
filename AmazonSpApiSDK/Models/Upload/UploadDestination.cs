/* 
 * Selling Partner API for Authorization
 *
 * The Selling Partner API for Authorization helps developers manage authorizations and check the specific permissions associated with a given authorization.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace FikaAmazonAPI.AmazonSpApiSDK.Models.Upload
{
    /// <summary>
    /// A Login with Amazon (LWA) authorization code.
    /// </summary>
    [DataContract]
    public partial class UploadDestination : IEquatable<UploadDestination>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UploadDestination" /> class.
        /// </summary>
        /// <param name="_uploadDestinationId">A Login with Amazon (LWA) authorization code that can be exchanged for a refresh token and access token that authorize you to make calls to a Selling Partner API..</param>
        public UploadDestination()
        {
        }


        [DataMember(Name = "_uploadDestinationId", EmitDefaultValue = false)]
        public string _uploadDestinationId { get; set; }
        public string url { get; set; }
        public object headers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UploadDestination {\n");
            sb.Append("  _uploadDestinationId: ").Append(_uploadDestinationId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UploadDestination);
        }

        /// <summary>
        /// Returns true if UploadDestination instances are equal
        /// </summary>
        /// <param name="input">Instance of UploadDestination to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UploadDestination input)
        {
            if (input == null)
                return false;

            return
                (
                    this._uploadDestinationId == input._uploadDestinationId ||
                    (this._uploadDestinationId != null &&
                    this._uploadDestinationId.Equals(input._uploadDestinationId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this._uploadDestinationId != null)
                    hashCode = hashCode * 59 + this._uploadDestinationId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
